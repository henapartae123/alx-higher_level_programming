The ``7-base_geometry`` module
======================

This module defines an integer addition function `def area(self)``.

Usage
-------------------

Import file:
        >>> BaseGeometry= __import__("7-base_geometry").BaseGeometry

Function expects an integer >= 0:

::

	>>> base.integer_validator("integer", 0)
	Traceback (most recent call last):
    ValueError: integer must be greater than 0

::

	>>> base.integer_validator("integer", -5)
	Traceback (most recent call last):
    ValueError: integer must be greater than 0

Function expects an integer value:

::

	>>> base.integer_validator("bool", True)
	Traceback (most recent call last):
    TypeError: bool must be an integer

::

	>>> base.integer_validator("float", 1.5)
    Traceback (most recent call last):
    TypeError: float must be an integer

::

	>>> base.integer_validator("complex", complex(1, 1))
    Traceback (most recent call last):
    TypeError: complex must be an integer
	
::

    >>> base.integer_validator("string", "John")
    Traceback (most recent call last):
    TypeError: string must be an integer

::

	>>> base.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

::

	>>> base.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
    TypeError: list must be an integer

::

	>>> base.integer_validator("dict", {"key": "value"})
    Traceback (most recent call last):
    TypeError: dict must be an integer

::

	>>> base.integer_validator("set", {"hello", "world"})
    Traceback (most recent call last):
    TypeError: set must be an integer

::

	>>> base.integer_validator("frozenset", frozenset(["hello", "world"]))
    Traceback (most recent call last):
    TypeError: frozenset must be an integer

::

	>>> base.integer_validator("bytes", b"bytes")
    Traceback (most recent call last):
    TypeError: bytes must be an integer

::

	>>> base.integer_validator("bytearrays", bytearray(b"bytes"))
    Traceback (most recent call last):
    TypeError: bytearrays must be an integer

Function expects 2 argumrnts

::

	>>> base.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

	>>> base.integer_validator("integer")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'
